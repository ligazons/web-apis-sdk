{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "eslint:recommended",
    "prettier"
  ],
  "parserOptions": {
    "allowImportExportEverywhere": true,
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "rules": {
    // Requires parens in arrow function arguments.
    // https://eslint.org/docs/rules/arrow-parens
    "arrow-parens": [
      "error",
      "as-needed"
    ],
    // Requires or disallows trailing commas.
    // https://eslint.org/docs/rules/comma-dangle
    "comma-dangle": [
      "error",
      "never"
    ],
    // Requires the use of === and !==.
    // https://eslint.org/docs/rules/eqeqeq
    "eqeqeq": [
      "error",
      "always"
    ],
    // Enforces consistent line breaks inside function parentheses.
    // https://eslint.org/docs/rules/function-paren-newline
    "function-paren-newline": 0,
    // Enforces the location of arrow function bodies with implicit returns.
    // https://eslint.org/docs/rules/implicit-arrow-linebreak
    "implicit-arrow-linebreak": 0,
    // Enforces or disallows the use of certain file extensions.
    // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/extensions.md
    "import/extensions": 0,
    // Ensures an imported module can be resolved to a module on the local filesystem, as defined by standard Node
    // require.resolve behavior.
    // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-unresolved.md
    "import/no-unresolved": 0,
    // Prevents unnecessary path segments in import and require statements.
    // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-useless-path-segments.md
    "import/no-useless-path-segments": 0,
    // When there is only a single export from a module, prefer using default export over named export.
    // https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/prefer-default-export.md
    "import/prefer-default-export": 0,
    // Enforces consistent indentation.
    // https://eslint.org/docs/rules/indent
    "indent": [
      "error",
      2,
      {
        "SwitchCase": 1
      }
    ],
    // Enforces consistent linebreak style.
    // https://eslint.org/docs/rules/linebreak-style
    "linebreak-style": [
      "error",
      "unix"
    ],
    // Enforces a maximum line length.
    // https://eslint.org/docs/rules/max-len
    "max-len": [
      "error",
      {
        "code": 140,
        "ignoreComments": true,
        "ignoreRegExpLiterals": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignoreUrls": true,
        "tabWidth": 2
      }
    ],
    // Disallows the use of alert, confirm, and prompt.
    // https://eslint.org/docs/rules/no-alert
    "no-alert": "error",
    // Disallows await inside of loops.
    // https://eslint.org/docs/rules/no-await-in-loop
    "no-await-in-loop": 0,
    // Disallows arrow functions where they could be confused with comparisons.
    // https://eslint.org/docs/rules/no-confusing-arrow
    "no-confusing-arrow": 0,
    // Disallows the use of console.
    // https://eslint.org/docs/rules/no-console
    "no-console": "error",
    // Disallows continue statements.
    // https://eslint.org/docs/rules/no-continue
    "no-continue": 0,
    // Disallows unnecessary labels.
    // https://eslint.org/docs/rules/no-extra-label
    "no-extra-label": 0,
    // Disallows labeled statements.
    // https://eslint.org/docs/rules/no-labels
    "no-labels": [
      "error",
      {
        "allowLoop": true
      }
    ],
    // Disallows multiple consecutive spaces.
    // https://eslint.org/docs/rules/no-multi-spaces
    "no-multi-spaces": "error",
    // Disallows the unary operators ++ and --.
    // https://eslint.org/docs/rules/no-plusplus
    "no-plusplus": [
      "error",
      {
        "allowForLoopAfterthoughts": true
      }
    ],
    // Disallows specified syntax.
    // https://eslint.org/docs/rules/no-restricted-syntax
    "no-restricted-syntax": [
      "warn",
      {
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
        "selector": "ForInStatement"
      },
      {
        "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.",
        "selector": "ForOfStatement"
      },
      {
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
        "selector": "LabeledStatement"
      },
      {
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize.",
        "selector": "WithStatement"
      }
    ],
    // Disallows assignment operators in return statements.
    // https://eslint.org/docs/rules/no-return-assign
    "no-return-assign": [
      "error",
      "except-parens"
    ],
    // Disallows all tabs.
    // https://eslint.org/docs/rules/no-tabs
    "no-tabs": [
      "error",
      {
        "allowIndentationTabs": true
      }
    ],
    // Disallows unused expressions.
    // https://eslint.org/docs/rules/no-unused-expressions
    "no-unused-expressions": [
      "error",
      {
        "allowShortCircuit": true,
        "allowTernary": true
      }
    ],
    // Disallows the use of variables before they are defined.
    // https://eslint.org/docs/rules/no-use-before-define
    "no-use-before-define": 0,
    // Enforces consistent line breaks after opening and before closing braces.
    // https://eslint.org/docs/rules/object-curly-newline
    "object-curly-newline": [
      "error",
      {
        "multiline": true
      }
    ],
    // Enforces consistent linebreak style for operators.
    // https://eslint.org/docs/rules/operator-linebreak
    "operator-linebreak": 0,
    // Enforces the consistent use of either backticks, double, or single quotes.
    // https://eslint.org/docs/rules/quotes
    "quotes": [
      2,
      "single",
      {
        "avoidEscape": true
      }
    ],
    // Requires or disallows semicolons instead of ASI.
    // https://eslint.org/docs/rules/semi
    "semi": [
      "error",
      "never"
    ],
    // Enforces location of semicolons.
    // https://eslint.org/docs/rules/semi-style
    "semi-style": [
      "error",
      "first"
    ]
  }
}
